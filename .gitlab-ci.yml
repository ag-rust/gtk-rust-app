.run_always:
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - when: always

.run_on_main:
  rules:
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: on_success

.cache-x86-64:
  cache:
    key:
      files:
        - Cargo.lock
      prefix: x86-64-
    paths:
      - target/

stages:
  - containers
  - prechecks
  - checks
  - release

include:
  - local: /ci/.gitlab-ci-containers.yml

formatting:
  image: rust:latest
  stage: prechecks
  extends: [.run_always]
  script:
    - rustup component add rustfmt
    - cargo fmt --all -- --color=always --check

outdated-check:
  image: $CI_REGISTRY_IMAGE/x86-64:$CI_COMMIT_REF_SLUG
  allow_failure: true
  stage: prechecks
  extends: [.run_always]
  script:
    - cargo outdated -R --exit-code -1

build and test x86-64:
  image: $CI_REGISTRY_IMAGE/x86-64:$CI_COMMIT_REF_SLUG
  stage: checks
  extends: [.run_always, .cache-x86-64]
  script:
    - cargo test --release

release:
  image: $CI_REGISTRY_IMAGE/x86-64:main
  stage: release
  extends: [.run_on_main, .cache-x86-64]
  script:
    - git remote set-url origin https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git config --global user.email "gitlab ci"
    - git config --global user.name "gitlab ci"
    - cd gtk-rust-app-derive && cog bump --auto || cog bump --patch
    - cd gtk-rust-app-derive && cargo publish --token $CRATES_IO_TOKEN
    - cog bump --auto || cog bump --patch
    - TAG_VERSION=$(grep version Cargo.toml | head -1 | sed 's/version = "//g' | sed 's/"//g')
    - git push --atomic origin v$TAG_VERSION HEAD:$CI_COMMIT_BRANCH
    - cargo publish --token $CRATES_IO_TOKEN

stages:
  - containers0
  - containers1
  - prechecks
  - checks
  - release

build-container-x86-64:
  image: docker:19.03.12
  stage: containers0
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/x86-64:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG -f ci/ci-x86-64.dockerfile .
    - docker push $IMAGE_TAG
  timeout: 3 hours
  only:
    changes:
      - ci/ci-x86-64.dockerfile

build-container-aarch64-0:
  image: docker:19.03.12
  stage: containers0
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/aarch64-0:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG -f ci/ci-aarch64-0.dockerfile .
    - docker push $IMAGE_TAG
  timeout: 3 hours
  only:
    changes:
      - ci/ci-aarch64-0.dockerfile

build-container-aarch64:
  image: docker:19.03.12
  stage: containers1
  needs: [build-container-aarch64-0]
  services:
    - docker:19.03.12-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/aarch64:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG -f ci/ci-aarch64.dockerfile .
    - docker push $IMAGE_TAG
  timeout: 3 hours
  only:
    changes:
      - ci/ci-aarch64*.dockerfile
      

formatting:
  image: rust:latest
  stage: prechecks
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - when: always
  script:
    - rustup component add rustfmt
    - cargo fmt --all -- --color=always --check

outdated-check:
  image: $CI_REGISTRY_IMAGE/x86-64:main
  allow_failure: true
  stage: prechecks
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - when: always
  script:
    - source $HOME/.cargo/env
    - cargo outdated -R --exit-code -1

build and test aarch64:
  image: $CI_REGISTRY_IMAGE/aarch64:main
  stage: checks
  cache:
    key:
      files:
        - Cargo.lock
      prefix: aarch64-
    paths:
      - target/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - when: always
  script:
    - source $HOME/.cargo/env
    - cargo test --release

build and test x86-64:
  image: $CI_REGISTRY_IMAGE/x86-64:main
  stage: checks
  cache:
    key:
      files:
        - Cargo.lock
      prefix: x86-64-
    paths:
      - target/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - when: always
  script:
    - source $HOME/.cargo/env
    - cargo test --release

release:
  image: $CI_REGISTRY_IMAGE/x86-64:main
  stage: release
  rules:
    - if: '$CI_COMMIT_TITLE =~ /chore\(version\)\:.*/'
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      when: on_success
  script:
    - source $HOME/.cargo/env
    - whereis cog
    - git remote set-url origin https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    - git config --global user.email "gitlab ci"
    - git config --global user.name "gitlab ci"
    - cd gtk-rust-app-derive && cog bump --auto || cog bump --patch
    - cd gtk-rust-app-derive && cargo publish --token $CRATES_IO_TOKEN
    - cog bump --auto || cog bump --patch
    - TAG_VERSION=$(grep version Cargo.toml | head -1 | sed 's/version = "//g' | sed 's/"//g')
    - git push --atomic origin v$TAG_VERSION HEAD:$CI_COMMIT_BRANCH
    - cargo publish --token $CRATES_IO_TOKEN
